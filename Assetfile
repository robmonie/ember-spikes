require "rake-pipeline-web-filters"
require "json"
require "uglifier"
require "./neuter"


class JSHintRC < Rake::Pipeline::Filter
  def generate_output(inputs, output)
    inputs.each do |input|
      file = File.read(input.fullpath)
      jshintrc = File.read(".jshintrc")
      output.write "var JSHINTRC = #{jshintrc};\n\n#{file}"
    end
  end
end

distros = {

  :validation => %w(validation),
  :wizard     => %w(wizard),
  :full       => %w(ember-tools validation wizard)
}

output "dist"

input "packages" do

  output "tests"

  match "*/tests/**/*.js" do
    minispade :rewrite_requires => true, :string => true, :module_id_generator => proc { |input|
      id = input.path.dup
      id.sub!(/\.js$/, '')
      id.sub!(/\/main$/, '')
      id.sub!('/tests', '/~tests')
      id
    }

    concat "ember-tools-tests.js"
  end

  match "ember-tools-tests.js" do
    filter JSHintRC
  end
end

input "packages" do
  match "*/lib/**/*.js" do
    minispade :rewrite_requires => true, :string => true, :module_id_generator => proc { |input|
      id = input.path.dup
      id.sub!('/lib/', '/')
      id.sub!(/\.js$/, '')
      id.sub!(/\/main$/, '')
      id
    }

    concat "ember-tools-spade.js"
  end
end

input "packages" do
  match "*/lib/**/main.js" do
    neuter do |filename|
      File.join("modules/", filename.gsub('/lib/main.js', '.js'))
    end
  end
end

distros.each do |name, modules|
  name = name == :full ? "ember-tools" : "ember-tools-#{name}"

  input "dist/modules" do
    module_paths = modules.map{|m| "#{m}.js" }
    match "{#{module_paths.join(',')}}" do
      concat(module_paths){ ["#{name}.js", "#{name}.prod.js"] }
    end

    # Add debug to the main distro
    match "{#{name}.js,ember-tools-debug.js}" do
      concat ["ember-tools-debug.js"], "#{name}.js"
    end

    # Minify
    match "#{name}.min.js" do
      uglify{ "#{name}.min.js" }
    end
  end
end

# vim: filetype=ruby